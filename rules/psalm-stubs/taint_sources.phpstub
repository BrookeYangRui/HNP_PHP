<?php
// Taint source definitions for HNP (Host Header Poisoning) analysis

// PSR-7 Request Interface
namespace Psr\Http\Message;

class ServerRequestInterface {
    /**
     * @psalm-taint-source input
     */
    public function getHost(): string {}
    
    /**
     * @psalm-taint-source input
     */
    public function getHeader(string $name): array {}
    
    /**
     * @psalm-taint-source input
     */
    public function getHeaderLine(string $name): string {}
}

// Symfony Request methods - HNP attack vectors
namespace Symfony\Component\HttpFoundation;

class Request {
    /**
     * @psalm-taint-source input
     * Returns the request's host. Reads $_SERVER['HTTP_HOST'] directly.
     * Source: https://github.com/symfony/http-foundation/blob/6.0/Request.php#L1060
     */
    public function getHost(): string {}
    
    /**
     * @psalm-taint-source input
     * Returns the HTTP host with port
     */
    public function getHttpHost(): string {}
    
    /**
     * @psalm-taint-source input
     * Gets a server variable - can access $_SERVER['HTTP_HOST']
     */
    public function getServer(string $key, $default = null) {}
    
    /**
     * @psalm-taint-source input
     * Returns scheme://host - calls getHost() internally
     */
    public function getSchemeAndHttpHost(): string {}
    
    /**
     * @psalm-taint-source input
     * Returns the full URI
     */
    public function getUri(): string {}
    
    /**
     * @psalm-taint-source input
     * Returns the request scheme
     */
    public function getScheme(): string {}
    
    /**
     * @psalm-taint-source input
     * Returns the request port
     */
    public function getPort(): int {}
}

// Laravel Request methods - HNP attack vectors
namespace Illuminate\Http;

class Request {
    /**
     * @psalm-taint-source input
     * Returns the request's host. This method reads $_SERVER['HTTP_HOST'] directly.
     * Source: https://github.com/laravel/framework/blob/10.x/src/Illuminate/Http/Request.php
     */
    public function getHost(): string {}
    
    /**
     * @psalm-taint-source input
     * Alias for getHost()
     */
    public function host(): string {}

    /**
     * @psalm-taint-source input
     * Returns the HTTP host with port
     */
    public function getHttpHost(): string {}

    /**
     * @psalm-taint-source input
     * Returns scheme://host - calls getHost() internally
     * Source: https://github.com/laravel/framework/blob/10.x/src/Illuminate/Http/Request.php
     */
    public function getSchemeAndHttpHost(): string {}

    /**
     * @psalm-taint-source input
     * Returns the root URL - calls getSchemeAndHttpHost()
     */
    public function root(): string {}

    /**
     * @psalm-taint-source input
     * Returns the current URL without query string
     */
    public function url(): string {}

    /**
     * @psalm-taint-source input
     * Returns the full URL including query string - calls getSchemeAndHttpHost()
     * Source: https://github.com/laravel/framework/blob/10.x/src/Illuminate/Http/Request.php
     */
    public function fullUrl(): string {}
    
    /**
     * @psalm-taint-source input
     * Checks if the full URL matches a pattern
     */
    public function fullUrlIs(string $pattern): bool {}
    
    /**
     * @psalm-taint-source input
     * Checks if the request matches a pattern
     */
    public function is(string $pattern): bool {}

    /**
     * @psalm-taint-source input
     * Gets a header value
     */
    public function header(string $key = null, $default = null) {}

    /**
     * @psalm-taint-source input
     * Gets a server variable - can access $_SERVER['HTTP_HOST']
     */
    public function server(string $key = null, $default = null) {}
}

// Laravel Routing - URL Generation (HNP sinks)
namespace Illuminate\Routing;

class UrlGenerator {
    /**
     * @psalm-taint-source input
     * Generates absolute URL - calls Request::getSchemeAndHttpHost()
     * Source: https://github.com/laravel/framework/blob/10.x/src/Illuminate/Routing/UrlGenerator.php
     */
    public function to(string $path): string {}
    
    /**
     * @psalm-taint-source input
     * Generates URL from route name - calls toRoute() â†’ to()
     * Source: https://github.com/laravel/framework/blob/10.x/src/Illuminate/Routing/UrlGenerator.php
     */
    public function route(string $name): string {}
    
    /**
     * @psalm-taint-source input
     * Generates URL from controller action - calls to()
     * Source: https://github.com/laravel/framework/blob/10.x/src/Illuminate/Routing/UrlGenerator.php
     */
    public function action(string $controller): string {}
}

class Redirector {
    /**
     * @psalm-taint-source input
     * Creates redirect response - calls UrlGenerator::to()
     * Source: https://github.com/laravel/framework/blob/10.x/src/Illuminate/Routing/Redirector.php
     */
    public function to(string $url): string {}
    
    /**
     * @psalm-taint-source input
     * Creates redirect to route - calls UrlGenerator::route()
     * Source: https://github.com/laravel/framework/blob/10.x/src/Illuminate/Routing/Redirector.php
     */
    public function route(string $name): string {}
    
    /**
     * @psalm-taint-source input
     * Creates redirect to controller action - calls UrlGenerator::action()
     * Source: https://github.com/laravel/framework/blob/10.x/src/Illuminate/Routing/Redirector.php
     */
    public function action(string $controller): string {}
}

// CodeIgniter Request methods
namespace CodeIgniter\HTTP;

class Request {
    /**
     * @psalm-taint-source input
     */
    public function getServer(string $index = null, bool $xss_clean = false) {}
    
    /**
     * @psalm-taint-source input
     */
    public function getHeader(string $name): ?string {}
}

// CakePHP Request methods
namespace Cake\Http;

class ServerRequest {
    /**
     * @psalm-taint-source input
     */
    public function getHeader(string $name): array {}
    
    /**
     * @psalm-taint-source input
     */
    public function getHeaderLine(string $name): string {}
}

// Global functions and variables (no namespace)
// HTTP Host headers - primary sources of HNP attacks
/**
 * @psalm-taint-source input
 */
function getServerHost(): string {
    return $_SERVER['HTTP_HOST'] ?? '';
}

/**
 * @psalm-taint-source input
 */
function getServerVar(string $key): string {
    return $_SERVER[$key] ?? '';
}

// Advanced taint sources for HNP
/**
 * @psalm-taint-source input
 */
function getHttpHost(): string {
    return $_SERVER['HTTP_HOST'] ?? '';
}

/**
 * @psalm-taint-source input
 */
function getServerName(): string {
    return $_SERVER['SERVER_NAME'] ?? '';
}

/**
 * @psalm-taint-source input
 */
function getRequestUri(): string {
    return $_SERVER['REQUEST_URI'] ?? '';
}

/**
 * @psalm-taint-source input
 */
function getRequestScheme(): string {
    return $_SERVER['REQUEST_SCHEME'] ?? 'http';
}

/**
 * @psalm-taint-source input
 */
function getServerPort(): int {
    return (int)($_SERVER['SERVER_PORT'] ?? 80);
}

// Proxy headers - common HNP attack vectors
/**
 * @psalm-taint-source input
 */
function getXForwardedHost(): string {
    return $_SERVER['HTTP_X_FORWARDED_HOST'] ?? '';
}

/**
 * @psalm-taint-source input
 */
function getXForwardedProto(): string {
    return $_SERVER['HTTP_X_FORWARDED_PROTO'] ?? '';
}

/**
 * @psalm-taint-source input
 */
function getXForwardedPort(): string {
    return $_SERVER['HTTP_X_FORWARDED_PORT'] ?? '';
}

/**
 * @psalm-taint-source input
 */
function getXForwardedFor(): string {
    return $_SERVER['HTTP_X_FORWARDED_FOR'] ?? '';
}

/**
 * @psalm-taint-source input
 */
function getXRealIp(): string {
    return $_SERVER['HTTP_X_REAL_IP'] ?? '';
}

/**
 * @psalm-taint-source input
 */
function getClientIp(): string {
    return $_SERVER['HTTP_CLIENT_IP'] ?? '';
}

/**
 * @psalm-taint-sink input $v
 */
function hnp_test_sink(string $v): void {}

/**
 * @psalm-taint-source input
 */
function hnp_test_source(): string { return 'tainted'; }

/**
 * @psalm-taint-sink html $value
 */
function withHeader(string $name, string $value): string {
    return $value;
}

// WordPress functions
/**
 * @psalm-taint-source input
 */
function wp_guess_url(): string {
    return $_SERVER['HTTP_HOST'] ?? '';
}

/**
 * @psalm-taint-source input
 */
function get_site_url(): string {
    return wp_guess_url();
}

/**
 * @psalm-taint-source input
 */
function get_home_url(): string {
    return wp_guess_url();
}

/**
 * @psalm-taint-source input
 */
function site_url(string $path = ''): string {
    return get_site_url() . $path;
}

/**
 * @psalm-taint-source input
 */
function home_url(string $path = ''): string {
    return get_home_url() . $path;
}

// WordPress global variables
$HTTP_HOST = 'tainted input';
$SERVER_NAME = 'tainted input';

// Laravel Global Helper Functions - HNP attack vectors
/**
 * @psalm-taint-source input
 * Global helper for route() - calls app('url')->route()
 * Source: https://github.com/laravel/framework/blob/10.x/src/Illuminate/Foundation/helpers.php
 */
function route(string $name, array $parameters = [], bool $absolute = true): string {}

/**
 * @psalm-taint-source input
 * Global helper for url()->to() - calls UrlGenerator::to()
 * Source: https://github.com/laravel/framework/blob/10.x/src/Illuminate/Foundation/helpers.php
 */
function url(string $path = null, array $parameters = [], bool $secure = null): string {}

/**
 * @psalm-taint-source input
 * Global helper for action() - calls UrlGenerator::action()
 * Source: https://github.com/laravel/framework/blob/10.x/src/Illuminate/Foundation/helpers.php
 */
function action(string $name, array $parameters = [], bool $absolute = true): string {}

/**
 * @psalm-taint-source input
 * Global helper for redirect()->route() - calls Redirector::route()
 * Source: https://github.com/laravel/framework/blob/10.x/src/Illuminate/Foundation/helpers.php
 */
function redirect(string $to = null, int $status = 302, array $headers = [], bool $secure = null): string {}

// Additional PHP frameworks
namespace Symfony\Component\HttpFoundation;

class Request {
    /**
     * @psalm-taint-source input
     */
    public function getHost(): string {}
    
    /**
     * @psalm-taint-source input
     */
    public function getHttpHost(): string {}
    
    /**
     * @psalm-taint-source input
     */
    public function getSchemeAndHttpHost(): string {}
    
    /**
     * @psalm-taint-source input
     */
    public function getUri(): string {}
    
    /**
     * @psalm-taint-source input
     */
    public function getScheme(): string {}
    
    /**
     * @psalm-taint-source input
     */
    public function getPort(): int {}
}

class Response {
    // escape annotations removed for flow preservation
}

// CodeIgniter 3.x & 4.x
namespace CodeIgniter\HTTP;

class Request {
    /**
     * @psalm-taint-source input
     */
    public function getServer(string $index = null, bool $xss_clean = false) {}
    
    /**
     * @psalm-taint-source input
     */
    public function getHeader(string $name): ?string {}
    
    /**
     * @psalm-taint-source input
     */
    public function getHost(): string {}
}

// CodeIgniter 3.x Config
class CI_Config {
    /**
     * @psalm-taint-source input
     */
    public function base_url(): string {}
    
    /**
     * @psalm-taint-source input
     */
    public function site_url(string $uri = ''): string {}
}

// CodeIgniter 3.x Input
class CI_Input {
    /**
     * @psalm-taint-source input
     */
    public function server(string $index = null): string {}
}

// CodeIgniter 3.x URI
class CI_URI {
    /**
     * @psalm-taint-source input
     */
    public function current_url(): string {}
}

// CodeIgniter helpers
/**
 * @psalm-taint-source input
 */
function site_url(string $uri = ''): string {
    return '';
}

/**
 * @psalm-taint-source input
 */
function base_url(string $uri = ''): string {
    return '';
}

/**
 * @psalm-taint-source input
 */
function current_url(): string {
    return '';
}

class Response {
    // escape annotations removed for flow preservation
}

// CakePHP
namespace Cake\Http;

class ServerRequest {
    /**
     * @psalm-taint-source input
     */
    public function getHeader(string $name): array {}
    
    /**
     * @psalm-taint-source input
     */
    public function getHeaderLine(string $name): string {}
    
    /**
     * @psalm-taint-source input
     */
    public function getUri(): \Psr\Http\Message\UriInterface {}
}

class Response {
    // escape annotations removed for flow preservation
}

// Sanitizer functions
function filter_var($value, int $filter = FILTER_DEFAULT, $options = null) {
    return $value;
}

function htmlspecialchars(string $string, int $flags = ENT_COMPAT, string $encoding = 'UTF-8', bool $double_encode = true): string {
    return $string;
}

function htmlentities(string $string, int $flags = ENT_COMPAT, string $encoding = 'UTF-8', bool $double_encode = true): string {
    return $string;
}

function strip_tags(string $string, string $allowed_tags = null): string {
    return $string;
}

function preg_replace($pattern, $replacement, $subject, int $limit = -1, int &$count = null) {
    return $subject;
}

function str_replace($search, $replace, $subject, int &$count = null) {
    return $subject;
}

function trim(string $string, string $characters = " \n\r\t\v\0"): string {
    return $string;
}

function strtolower(string $string): string {
    return $string;
}

function strtoupper(string $string): string {
    return $string;
}

function substr(string $string, int $start, int $length = null): string {
    return $string;
}

function parse_url(string $url, int $component = -1) {
    return $url;
}

function gethostbyname(string $hostname): string {
    return $hostname;
}

function gethostbyaddr(string $ip_address): string {
    return $ip_address;
}

// Advanced sanitizers for HNP
function validateHost(string $host): string {
    // Strong host validation - only allow alphanumeric, dots, hyphens
    if (preg_match('/^[a-zA-Z0-9.-]+$/', $host) && strlen($host) <= 253) {
        return strtolower($host);
    }
    return '';
}

function sanitizeHost(string $host): string {
    // Remove port, convert to lowercase, trim
    $host = strtolower(trim(explode(':', $host)[0]));
    // Remove trailing dot
    $host = rtrim($host, '.');
    return $host;
}

function validateUrl(string $url): string {
    $parsed = parse_url($url);
    if ($parsed && isset($parsed['host'])) {
        $host = sanitizeHost($parsed['host']);
        if ($host && filter_var($host, FILTER_VALIDATE_DOMAIN)) {
            return $url;
        }
    }
    return '';
}

function whitelistHost(string $host, array $allowedHosts): string {
    $host = sanitizeHost($host);
    if (in_array($host, $allowedHosts, true)) {
        return $host;
    }
    return '';
}

function normalizeHost(string $host): string {
    // Remove port, convert to lowercase, remove trailing dot
    $host = strtolower(trim(explode(':', $host)[0]));
    $host = rtrim($host, '.');
    // Validate domain format
    if (filter_var($host, FILTER_VALIDATE_DOMAIN)) {
        return $host;
    }
    return '';
}

function buildSafeUrl(string $scheme, string $host, string $path = '/'): string {
    $host = sanitizeHost($host);
    if (!$host || !filter_var($host, FILTER_VALIDATE_DOMAIN)) {
        return '';
    }
    return $scheme . '://' . $host . $path;
}

function isTrustedHost(string $host, array $trustedHosts): bool {
    $host = sanitizeHost($host);
    foreach ($trustedHosts as $trusted) {
        if ($host === $trusted || fnmatch($trusted, $host)) {
            return true;
        }
    }
    return false;
}

function getTrustedHost(string $host, array $trustedHosts): string {
    if (isTrustedHost($host, $trustedHosts)) {
        return sanitizeHost($host);
    }
    return '';
}

// Laravel Trusted Hosts - Security Guards
/**
 * Laravel's trusted hosts validation
 * Source: https://laravel.com/docs/12.x/requests#configuring-trusted-hosts
 */
function isLaravelTrustedHost(string $host): bool {
    $trustedHosts = config('app.trusted_hosts', []);
    $host = strtolower(trim($host));
    foreach ($trustedHosts as $trusted) {
        if ($host === $trusted || fnmatch($trusted, $host)) {
            return true;
        }
    }
    return false;
}

/**
 * Laravel's trusted hosts sanitizer
 */
function getLaravelTrustedHost(string $host): string {
    if (isLaravelTrustedHost($host)) {
        return strtolower(trim($host));
    }
    return '';
}

// Laravel Trusted Proxies - Security Guards
/**
 * Laravel's trusted proxies validation
 * Source: https://laravel.com/docs/12.x/requests#configuring-trusted-proxies
 */
function isLaravelTrustedProxy(string $ip): bool {
    $trustedProxies = config('app.trusted_proxies', []);
    return in_array($ip, $trustedProxies, true);
}

/**
 * Laravel's trusted proxies sanitizer
 */
function getLaravelTrustedProxyHost(string $host): string {
    if (isLaravelTrustedProxy($host)) {
        return sanitizeHost($host);
    }
    return '';
}

// Symfony Trusted Proxies - Security Guards
/**
 * Symfony's trusted proxies validation
 * Source: https://symfony.com/doc/current/deployment/proxies.html
 */
function isSymfonyTrustedProxy(string $ip): bool {
    // Symfony trusted proxies configuration
    return false; // Implementation depends on Symfony configuration
}

/**
 * Symfony's trusted proxies sanitizer
 */
function getSymfonyTrustedProxyHost(string $host): string {
    if (isSymfonyTrustedProxy($host)) {
        return sanitizeHost($host);
    }
    return '';
}

// Yii2 Framework
namespace yii\web;

class Request {
    /**
     * @psalm-taint-source input
     */
    public function getHostInfo(): string {}
    
    /**
     * @psalm-taint-source input
     */
    public function getServerName(): string {}
}

class UrlManager {
    /**
     * @psalm-taint-source input
     */
    public function createAbsoluteUrl(array $params, bool $scheme = true): string {}
}

namespace yii\helpers;

class Url {
    /**
     * @psalm-taint-source input
     */
    public static function to($route, bool $scheme = false): string {}
    
    /**
     * @psalm-taint-source input
     */
    public static function home(bool $scheme = false): string {}
}